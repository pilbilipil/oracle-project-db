CREATE TABLE USER_INFO
(
id int generated by default as identity primary key,
first_name varchar(20) not null,
last_name varchar(20) not null,
email varchar(35) not null,
phone varchar(11) not null,
user_password varchar(100) not null,
date_of_birth date not null,
gender varchar(10) not null,
city varchar(35) not null,
microdistrict varchar(35) not null,
home varchar(20) not null,
flat varchar(10) not null,
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE ORDER_STATUS
(
id int generated by default as identity primary key,
status varchar(20) not null,
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE USER_ORDER
(
id int generated by default as identity primary key,
user_id int references user_info(id),
order_status_id int references order_status(id),
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE DELIVARY
(
delivary_id int generated by default as identity primary key,
order_id int references user_order(id),
item_price number(10) not null,
delivary_price number(10) not null,
send_time date not null,
arrived_time date not null,
city varchar(35) not null,
home varchar(20) not null,
microdistrict varchar(35) not null,
flat varchar(20) not null,
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE TRANSACTION_STATUS
(
id int generated by default as identity primary key,
status varchar(20) not null,
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE TRANSACTION_INFO
(
id int generated by default as identity primary key,
transaction_status_id int references transaction_status(id),
order_id int references user_order(id),
transaction_time date not null,
transaction_method varchar(20) not null,
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE PRODUCT_STATUS
(
id int generated by default as identity primary key,
status varchar(20) not null,
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE PRODUCT
(
id int generated by default as identity primary  key,
product_status_id int references product_status(id),
price number(10) not null,
product_count number(5) not null,
weight float(5) not null,
product_size varchar(20) not null,
product_country varchar(35) not null,
product_name varchar(35) not null,
product_type varchar(35) not null,
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE ORDER_PRODUCT
(
id int generated by default as identity primary key,
product_id int references product(id),
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE SERVICE_PRODUCT
(
id int generated by default as identity primary key,
order_product_id int references order_product(id),
order_service_id int references order_service(id),
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE ORDER_ITEM
(
id int generated by default as identity primary key,
order_id int references user_order(id),
service_product_id int references service_product(id),
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE COMPOSITION
(
id int generated by default as identity primary key,
composition_capacity number(10) not null,
microdistrict varchar(35) not null,
shipment date not null,
composition_name varchar(20) not null,
create_user varchar(20) not null,
update_user varchar(20) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE COMPOSITION_PRODUCT
(
id int generated by default as identity primary key,
composition_id int references composition(id),
product_id int references product(id),
create_user varchar(20) not null,
update_user varchar(20) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE SERVICE_INFO
(
id int generated by default as identity primary key,
price number(10) not null,
service_type varchar(20),
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE ORDER_SERVICE
(
id int generated by default as identity primary key,
service_id int references service_info(id),
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE EMPLOYEE 
(
id int generated by default as identity primary key,
date_of_birth date not null,
first_name varchar(20) not null,
last_name varchar(20) not null,
email varchar(35) not null,
specialty varchar(25) not null,
phone varchar(11) not null,
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE SERVICE_EMPLOYEE
(
id int generated by default as identity primary key,
employee_id int references employee(id),
service_id int references service_info(id),
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE DIRECTOR
(
id int generated by default as identity primary key,
date_of_birth date not null,
fist_name varchar(20) not null,
last_name varchar(20) not null,
phone varchar(11) not null,
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE OFFICE
(
id int generated by default as identity primary key,
microdistrict varchar(50) not null,
office_name varchar(35) not null,
create_user varchar(50) not null,
update_user varchar(50) not null,
create_time date not null,
update_time date not null
)

CREATE TABLE DIRECTOR_OFFICE
(
id int generated by default as identity primary key,
director_id int references director(id),
office_id int references office(id),
crate_user varchar(50) not null,
update_user varchar(50) not null,
crete_time date not null,
update_ime date not null
)

CREATE TABLE EMPLOYEE_OFFICE
(
id int generated by default as identity primary key,
office_id int references office(id),
employee_id int references employee(id),
create_user varchar(20) not null,
update_user varchar(20) not null,
create_time date not null,
update_time date not null
)

---GENERATE_BLOCK------GENERATE_BLOCK------GENERATE_BLOCK------GENERATE_BLOCK---

---GENERATE USER---
CREATE OR REPLACE PROCEDURE user_add(range_of_row int)
AS 
count_number int := 1;
BEGIN
WHILE count_number < range_of_row
LOOP
INSERT INTO USER_INFO(id,first_name,last_name,email,phone,user_password,date_of_birth,gender,city,microdistrict,home,flat,create_user,update_user,create_time,update_time)
VALUES(count_number,CASE round(TRUNC(dbms_random.value(1,50))) 
            WHEN 1 THEN 'artem' 
            WHEN 2 THEN 'alexsander' 
            WHEN 3 THEN 'maksim'
            WHEN 4 THEN 'danil' 
            WHEN 5 THEN 'dmitry'
            WHEN 6 THEN 'ivan' 
            WHEN 7 THEN 'kiril' 
            WHEN 8 THEN 'nikita'
            WHEN 9 THEN 'mixail' 
            WHEN 10 THEN 'egor' 
            WHEN 11 THEN 'matvey' 
            WHEN 12 THEN 'andrey' 
            WHEN 13 THEN 'ilia'
            WHEN 14 THEN 'alexey' 
            WHEN 15 THEN 'roman' 
            WHEN 16 THEN 'sergey' 
            WHEN 17 THEN 'vladislav' 
            WHEN 18 THEN 'yaroslav'
            WHEN 19 THEN 'timofey' 
            WHEN 20 THEN 'arseny' 
            WHEN 21 THEN 'denis' 
            WHEN 22 THEN 'vladimir' 
            WHEN 23 THEN 'pavel'
            WHEN 24 THEN 'gleb' 
            WHEN 25 THEN 'konstantin' 
            WHEN 26 THEN 'bogdan' 
            WHEN 27 THEN 'evgeny' 
            WHEN 28 THEN 'nikolay'
            WHEN 29 THEN 'stepan' 
            WHEN 30 THEN 'zahar' 
            WHEN 31 THEN 'timur' 
            WHEN 32 THEN 'mark' 
            WHEN 33 THEN 'semen'
            WHEN 34 THEN 'fedor' 
            WHEN 35 THEN 'georgy' 
            WHEN 36 THEN 'lev' 
            WHEN 37 THEN 'anton' 
            WHEN 38 THEN 'vadim'
            WHEN 39 THEN 'egor' 
            WHEN 40 THEN 'ruslan' 
            WHEN 41 THEN 'vecheslav' 
            WHEN 42 THEN 'gregory' 
            WHEN 43 THEN 'makar'
            WHEN 44 THEN 'artur' 
            WHEN 45 THEN 'viktor' 
            WHEN 46 THEN 'stanislav' 
            WHEN 47 THEN 'saveli' 
            WHEN 48 THEN 'oleg'
            WHEN 49 THEN 'david' 
            WHEN 50 THEN 'leonid' 
            END,CASE round(TRUNC(dbms_random.value(1,50))) 
            WHEN 1 THEN 'smirnov' 
            WHEN 2 THEN 'ivanov' 
            WHEN 3 THEN 'kuznesov'
            WHEN 4 THEN 'popov' 
            WHEN 5 THEN 'sokolov'
            WHEN 6 THEN 'lebedev' 
            WHEN 7 THEN 'kozlov' 
            WHEN 8 THEN 'novikov'
            WHEN 9 THEN 'morozof' 
            WHEN 10 THEN 'petrov'
            WHEN 11 THEN 'volkov' 
            WHEN 12 THEN 'soloviev' 
            WHEN 13 THEN 'vasiliev'
            WHEN 14 THEN 'zaicev' 
            WHEN 15 THEN 'pavlov'
            WHEN 16 THEN 'semenov' 
            WHEN 17 THEN 'golubev' 
            WHEN 18 THEN 'vinogradov'
            WHEN 19 THEN 'bogdanov' 
            WHEN 20 THEN 'vorobiev'
            WHEN 21 THEN 'fedorov' 
            WHEN 22 THEN 'mixailov' 
            WHEN 23 THEN 'belayev'
            WHEN 24 THEN 'tarasov' 
            WHEN 25 THEN 'belov'
            WHEN 26 THEN 'komarov' 
            WHEN 27 THEN 'orlov' 
            WHEN 28 THEN 'kiselev'
            WHEN 29 THEN 'makarov' 
            WHEN 30 THEN 'andreev'
            WHEN 31 THEN 'kovaliev' 
            WHEN 32 THEN 'ilin' 
            WHEN 33 THEN 'gusev'
            WHEN 34 THEN 'titov' 
            WHEN 35 THEN 'kuzmin'
            WHEN 36 THEN 'kudravsev' 
            WHEN 37 THEN 'baranov' 
            WHEN 38 THEN 'kulikov'
            WHEN 39 THEN 'alexseyev' 
            WHEN 40 THEN 'stepanov'
            WHEN 41 THEN 'yakovlev' 
            WHEN 42 THEN 'sorokin' 
            WHEN 43 THEN 'sergovich'
            WHEN 44 THEN 'romanov' 
            WHEN 45 THEN 'zaharov'
            WHEN 46 THEN 'borisov' 
            WHEN 47 THEN 'korolev' 
            WHEN 48 THEN 'gerasimov'
            WHEN 49 THEN 'ponomarev' 
            WHEN 50 THEN 'grigorev'
            END,TO_CHAR(dbms_random.string('X', 8)) || TRUNC(dbms_random.value(100, 900)) || CASE round(dbms_random.value(1,3)) 
            WHEN 1 THEN '@bk.ru' 
            WHEN 2 THEN '@mail.ru' 
            WHEN 3 THEN '@gmail.ru' 
            END,TRUNC(dbms_random.value(87001236451, 87999999999)),TO_CHAR(dbms_random.string('P', 10)), TO_DATE(SYSDATE,'mm/dd/yy'),'male','Almaty',CASE round(TRUNC(dbms_random.value(1,25))) 
            WHEN 1 THEN 'Sairan' 
            WHEN 2 THEN 'Aksay-1' 
            WHEN 3 THEN 'Aksay-4'
            WHEN 4 THEN 'Aksay-3' 
            WHEN 5 THEN 'Mamyr-4'
            WHEN 6 THEN 'Kulager' 
            WHEN 7 THEN 'Uljan' 
            WHEN 8 THEN '2 MKR'
            WHEN 9 THEN 'Duman' 
            WHEN 10 THEN '8 MKR' 
            WHEN 11 THEN 'Orbita-1' 
            WHEN 12 THEN 'Taugul' 
            WHEN 13 THEN 'Orbita-3'
            WHEN 14 THEN 'Rahat-3' 
            WHEN 15 THEN 'Sayali'
            WHEN 16 THEN 'Uljan-2' 
            WHEN 17 THEN 'Ermensay' 
            WHEN 18 THEN 'Kargaly'
            WHEN 19 THEN '5 MKR' 
            WHEN 20 THEN '6 MKR' 
            WHEN 21 THEN '3 MKR' 
            WHEN 22 THEN 'Almagul' 
            WHEN 23 THEN 'Samgau'
            WHEN 24 THEN 'Almagul-2' 
            WHEN 25 THEN 'Orbita-4' 
            END,TRUNC(dbms_random.value(1, 135)), TRUNC(dbms_random.value(1, 200)) , 'ADMIN' , 'ADMIN' , TO_DATE(SYSDATE,'yyyy-mm-dd') , TO_DATE(SYSDATE,'yyyy-mm-dd'));
            count_number := count_number + 1;
END LOOP;
END;
EXECUTE user_add(100);
---GENERATE USER---  

---ORDER_STATUS_GENERATE---
CREATE OR REPLACE PROCEDURE ORDER_STATUS_GENERATE(range_of_row int)
AS
count_number int := 1;
BEGIN
WHILE count_number < range_of_row
LOOP
INSERT INTO ORDER_STATUS(id,status,create_user,update_user,create_time,update_time)
VALUES(count_number,CASE round(dbms_random.value(1,3))
    WHEN 1 THEN 'completed'
    WHEN 2 THEN 'proccesing'
    WHEN 3 THEN 'rejected'
    END,'ADMIN','ADMIN',TO_DATE(SYSDATE,'YYYY-MM-DD'),TO_DATE(SYSDATE,'YYYY-MM-DD')
    );
    count_number := count_number + 1;
END LOOP;
END;
EXECUTE order_status_generate(1000);
---ORDER_STATUS_GENERATE---

---ORDER_GENERATE---
CREATE OR REPLACE PROCEDURE USER_ORDER_GENERATE(range_of_row int)
AS
count_number int := 1;
BEGIN
WHILE count_number < range_of_row
LOOP
INSERT INTO USER_ORDER(id,user_id,order_status_id,create_user,update_user,create_time,update_time)
VALUES(count_number,TRUNC(dbms_random.value(1,100)),count_number,'ADMIN','ADMIN',TO_DATE(SYSDATE,'YYYY-MM-DD'),TO_DATE(SYSDATE,'YYYY-MM-DD'));
count_number := count_number + 1;
END LOOP;
END;

EXECUTE USER_ORDER_GENERATE(1000);
---ORDER_GENERATE---

---PRODUCT_STATUS_GENERATE---
CREATE OR REPLACE PROCEDURE PRODUCT_STATUS_GENERATE(range_of_row int)
AS
count_number int := 1;
BEGIN
WHILE count_number < range_of_row
LOOP
INSERT INTO PRODUCT_STATUS(id,status,create_user,update_user,create_time,update_time)
VALUES(count_number,CASE round(dbms_random.value(1,4))
    WHEN 1 THEN 'ready'
    WHEN 2 THEN 'assembling'
    WHEN 3 THEN 'sold_out'
    WHEN 4 THEN 'ready'
    END,'ADMIN','ADMIN',TO_DATE(SYSDATE,'YYYY-MM-DD'),TO_DATE(SYSDATE,'YYYY-MM-DD'));
count_number := count_number + 1;
END LOOP;
END;
EXECUTE PRODUCT_STATUS_GENERATE(100);
---PRODUCT_STATUS_GENERATE---

---PRODUCT_GENERATE---
CREATE OR REPLACE PROCEDURE PRODUCT_GENERATE(range_of_row int)
AS
count_number int := 1;
BEGIN
WHILE count_number < range_of_row
LOOP
INSERT INTO PRODUCT(id,product_status_id,price,product_count,weight,product_size,product_country,product_name,product_type,create_user,update_user,create_time,update_time)
VALUES (count_number,count_number,TRUNC(dbms_random.value(3500,70000)),TRUNC(dbms_random.value(1500,10000)),TRUNC(dbms_random.value(1,350)),TRUNC(dbms_random.value(1,25)),CASE round(TRUNC(dbms_random.value(1,6)))
    WHEN 1 THEN 'USA'
    WHEN 2 THEN 'Japan'
    WHEN 3 THEN 'China'
    WHEN 4 THEN 'German'
    WHEN 5 THEN 'Russian' 
    END,CASE round(TRUNC(dbms_random.value(1,16)))
    WHEN 1 THEN 'brake_discs'
    WHEN 2 THEN 'pads'
    WHEN 3 THEN 'spark_plugs'
    WHEN 4 THEN 'shock_absorber'
    WHEN 5 THEN 'timing_belt'
    WHEN 6 THEN 'bonnet'
    WHEN 7 THEN 'spar'
    WHEN 8 THEN 'engine'
    WHEN 9 THEN 'drive_belt'
    WHEN 10 THEN 'air_filter' 
    WHEN 11 THEN 'ignition_lock'
    WHEN 12 THEN 'oil_filter'
    WHEN 13 THEN 'wiper_blade'
    WHEN 14 THEN 'lamps'
    WHEN 15 THEN 'case' 
    END,CASE round(TRUNC(dbms_random.value(1,4)))
    WHEN 1 THEN 'electrics'
    WHEN 2 THEN 'salon'
    WHEN 3 THEN 'consumables'
    END,'ADMIN','ADMIN',TO_DATE(SYSDATE,'YYYY-MM-DD'),TO_DATE(SYSDATE,'YYYY-MM-DD'));
count_number := count_number + 1;
END LOOP;
END;
EXECUTE PRODUCT_GENERATE(100);
---PRODUCT_GENERATE---

---ORDER_PRODUCT_GENERATE---
CREATE OR REPLACE PROCEDURE ORDER_PRODUCT_GENERATE(range_of_row int)
AS
count_number int := 1;
BEGIN
WHILE count_number < range_of_row
LOOP
INSERT INTO ORDER_PRODUCT(id,product_id,create_user,update_user,create_time,update_time)
VALUES(count_number,TRUNC(dbms_random.value(1,100)),'ADMIN','ADMIN',TO_DATE(SYSDATE,'YYYY-MM-DD'),TO_DATE(SYSDATE,'YYYY-MM-DD'));
count_number := count_number + 1;
END LOOP;
END;
EXECUTE ORDER_PRODUCT_GENERATE(5000);
---ORDER_PRODUCT_GENERATE---

---SERVICE_INFO_INSERT---
INSERT ALL
INTO SERVICE_INFO(id , price , service_type , create_user , update_user , create_time , update_time)
VALUES(1, 4000 , 'washing_outside' , 'ADMIN' , 'ADMIN' , TO_DATE(SYSDATE,'YYYY-MM-DD') , TO_DATE(SYSDATE,'YYYY-MM-DD'))
INTO SERVICE_INFO(id , price , service_type , create_user , update_user , create_time , update_time)
VALUES(2, 6000 , 'washing_inside' , 'ADMIN' , 'ADMIN' , TO_DATE(SYSDATE,'YYYY-MM-DD') , TO_DATE(SYSDATE,'YYYY-MM-DD'))
INTO SERVICE_INFO(id , price , service_type , create_user , update_user , create_time , update_time)
VALUES(3, 9000 , 'washing_full' , 'ADMIN' , 'ADMIN' , TO_DATE(SYSDATE,'YYYY-MM-DD') , TO_DATE(SYSDATE,'YYYY-MM-DD'))
INTO SERVICE_INFO(id , price , service_type , create_user , update_user , create_time , update_time)
VALUES(4, 5000 , 'surface_inspection' , 'ADMIN' , 'ADMIN' , TO_DATE(SYSDATE,'YYYY-MM-DD') , TO_DATE(SYSDATE,'YYYY-MM-DD'))
INTO SERVICE_INFO(id , price , service_type , create_user , update_user , create_time , update_time)
VALUES(5, 10000 , 'thorough_inspection' , 'ADMIN' , 'ADMIN' , TO_DATE(SYSDATE,'YYYY-MM-DD') , TO_DATE(SYSDATE,'YYYY-MM-DD'))
INTO SERVICE_INFO(id , price , service_type , create_user , update_user , create_time , update_time)
VALUES(6, 15000 , 'full_inspection' , 'ADMIN' , 'ADMIN' , TO_DATE(SYSDATE,'YYYY-MM-DD') , TO_DATE(SYSDATE,'YYYY-MM-DD'))
INTO SERVICE_INFO(id , price , service_type , create_user , update_user , create_time , update_time)
VALUES(7, 15000 , 'fast_repair' , 'ADMIN' , 'ADMIN' , TO_DATE(SYSDATE,'YYYY-MM-DD') , TO_DATE(SYSDATE,'YYYY-MM-DD'))
INTO SERVICE_INFO(id , price , service_type , create_user , update_user , create_time , update_time)
VALUES(8, 35000 , 'full_repair' , 'ADMIN' , 'ADMIN' , TO_DATE(SYSDATE,'YYYY-MM-DD') , TO_DATE(SYSDATE,'YYYY-MM-DD'))
INTO SERVICE_INFO(id , price , service_type , create_user , update_user , create_time , update_time)
VALUES(9, 75000 , 'replace_repair' , 'ADMIN' , 'ADMIN' , TO_DATE(SYSDATE,'YYYY-MM-DD') , TO_DATE(SYSDATE,'YYYY-MM-DD'))
SELECT 1 FROM DUAL;
---SERVICE_INFO_INSERT---


---ORDER_SERVICE_GENERATE---
CREATE OR REPLACE PROCEDURE ORDER_SERVICE_GENERATE(range_of_row int)
AS
count_number int := 1;
BEGIN
WHILE count_number < range_of_row
LOOP
INSERT INTO ORDER_SERVICE(id,service_id,create_user,update_user,create_time,update_time)
VALUES(count_number,TRUNC(dbms_random.value(1,10)),'ADMIN','ADMIN',TO_DATE(SYSDATE,'YYYY-MM-DD'),TO_DATE(SYSDATE,'YYYY-MM-DD'));
count_number := count_number + 1;
END LOOP;
END;
EXECUTE ORDER_SERVICE_GENERATE(5000);
---ORDER_SERVICE_GENERATE---

---SERVICE_PRODUCT_GENERATE---
CREATE OR REPLACE PROCEDURE SERVICE_PRODUCT_GENERATE(range_of_row int)
AS
count_number int := 1;
BEGIN
WHILE count_number < range_of_row
LOOP
INSERT INTO SERVICE_PRODUCT(id,order_service_id,order_product_id,create_user,update_user,create_time,update_time)
VALUES(count_number,TRUNC(dbms_random.value(1,5000)),TRUNC(dbms_random.value(1,5000)),'ADMIN','ADMIN',TO_DATE(SYSDATE,'YYYY-MM-DD'),TO_DATE(SYSDATE,'YYYY-MM-DD'));
count_number := count_number + 1;
END LOOP;
END;
EXECUTE SERVICE_PRODUCT_GENERATE(5000);
---SERVICE_PRODUCT_GENERATE---

CREATE OR REPLACE PROCEDURE ORDER_ITEM_GENERATE(range_of_row int)
AS
count_number int := 1;
BEGIN
WHILE count_number < range_of_row
LOOP
INSERT INTO ORDER_ITEM(id,order_id,service_product_id,create_user,update_user,create_time,update_time)
VALUES(count_number,TRUNC(dbms_random.value(1,1000)),TRUNC(dbms_random.value(1,5000)),'ADMIN','ADMIN',TO_DATE(SYSDATE,'YYYY-MM-DD'),TO_DATE(SYSDATE,'YYYY-MM-DD'));
count_number := count_number + 1;
END LOOP;
END;
EXECUTE ORDER_ITEM_GENERATE(5000);

---SELECT_BLOCKS------SELECT_BLOCKS------SELECT_BLOCKS------SELECT_BLOCKS---

---SHOW_POPULAR_PRODUCT---
SELECT PRODUCT_ID, COUNT(PRODUCT_ID) FROM ORDER_PRODUCT
GROUP BY PRODUCT_ID ORDER BY COUNT(PRODUCT_ID) DESC;
---SHOW_POPULAR_PRODUCT---

---SHOW_POPULAR_SERVICE---
SELECT SERVICE_ID, COUNT(SERVICE_ID) FROM ORDER_SERVICE
GROUP BY SERVICE_ID ORDER BY COUNT(SERVICE_ID) DESC;
---SHOW_POPULAR_SERVICE---

---SHOW_USER_MOST_ORDER---
SELECT USER_ID , COUNT(USER_ID) FROM USER_ORDER
GROUP BY USER_ID ORDER BY COUNT(USER_ID) DESC;
---SHOW_USER_MOST_ORDER---

---SHOW_POPULAR_FROM_PRODUCT_AND_SERVICE---
SELECT DISTINCT PRODUCT_ID , SERVICE_ID , COUNT(ORDER_PRODUCT.ORDER_ID || ORDER_SERVICE.ORDER_ID) AS TOTAL_ORDER FROM ORDER_SERVICE , ORDER_PRODUCT
GROUP BY PRODUCT_ID, SERVICE_ID ORDER BY TOTAL_ORDER DESC;
---SHOW_POPULAR_FROM_PRODUCT_AND_SERVICE----

SELECT PRODUCT_NAME AS POPULAR, COUNT(PRODUCT_ID) AS COUNT_PRODUCT FROM ORDER_PRODUCT , PRODUCT
GROUP BY PRODUCT_NAME ORDER BY COUNT_PRODUCT DESC;

SELECT PRODUCT_ID , COUNT(PRODUCT_ID) AS COUNT_PRODUCT FROM ORDER_PRODUCT
GROUP BY PRODUCT_ID ORDER BY COUNT_PRODUCT DESC;


SELECT SERVICE_ID , COUNT(SERVICE_ID) AS COUNT_SERVICE FROM ORDER_SERVICE
GROUP BY SERVICE_ID ORDER BY COUNT_SERVICE DESC;


